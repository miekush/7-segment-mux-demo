
7_Segment_Display_MUX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000328  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000001c  00000000  00000000  00000357  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000373  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aef  00000000  00000000  000003bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000720  00000000  00000000  00000eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033d  00000000  00000000  000015ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001908  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a0  00000000  00000000  00001ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000286  00000286  0000031a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d78  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_21 0000001e  0000022c  0000022c  000002c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.init_display 00000008  0000027e  0000027e  00000312  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.init_adc 00000020  0000020c  0000020c  000002a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.read_adc 00000038  0000019c  0000019c  00000230  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.update_display 000000ca  000000d2  000000d2  00000166  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    00000038  000001d4  000001d4  00000268  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .bss.speed_value 00000002  00800100  00800100  00000328  2**0
                  ALLOC
 21 .bss.adc_value 00000002  00800102  00800102  00000328  2**0
                  ALLOC
 22 .bss.adc_flag 00000001  00800104  00800104  00000328  2**0
                  ALLOC
 23 .progmemx.data.character_map 00000010  000000c2  000000c2  00000156  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 24 .text.libgcc.mul 0000001e  0000024a  0000024a  000002de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__dummy_fini 00000002  0000028e  0000028e  00000322  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__dummy_funcs_on_exit 00000002  00000290  00000290  00000324  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__dummy_simulator_exit 00000002  00000292  00000292  00000326  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.exit    00000016  00000268  00000268  000002fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text._Exit   00000004  0000028a  0000028a  0000031e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
   8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
   c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  10:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  14:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  18:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  1c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  20:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  24:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  28:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  2c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  30:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  34:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  38:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  3c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  40:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  44:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  48:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  4c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  50:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__vector_21>
  58:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  5c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  60:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  64:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 05       	cpc	r16, r1
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <main>
  ba:	0c 94 34 01 	jmp	0x268	; 0x268 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

00000286 <__bad_interrupt>:
 286:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.__vector_21:

0000022c <__vector_21>:
uint8_t adc_flag = 0;
uint16_t adc_value = 0;
uint16_t speed_value = 0;

ISR(ADC_vect)
{
 22c:	1f 92       	push	r1
 22e:	0f 92       	push	r0
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	0f 92       	push	r0
 234:	11 24       	eor	r1, r1
 236:	8f 93       	push	r24
	adc_flag = 1;
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <adc_flag>
}
 23e:	8f 91       	pop	r24
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

Disassembly of section .text.init_display:

0000027e <init_display>:

//function to init 7-segment display pins
void init_display(void)
{
	//set all digit pins as outputs
	DDRB = 0b11111111;
 27e:	8f ef       	ldi	r24, 0xFF	; 255
 280:	84 b9       	out	0x04, r24	; 4
	//set all segment pins as outputs
	DDRD = 0b11111111;
 282:	8a b9       	out	0x0a, r24	; 10
 284:	08 95       	ret

Disassembly of section .text.init_adc:

0000020c <init_adc>:

//function to init adc pins
void init_adc(void)
{
	//AVcc with external cap at AREF pin
	ADMUX |= 0b01 << REFS0;
 20c:	ec e7       	ldi	r30, 0x7C	; 124
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	80 64       	ori	r24, 0x40	; 64
 214:	80 83       	st	Z, r24
	//enable ADC, enable ADC interrupt, set clock prescaler to 64
	ADCSRA |= (1 << ADEN) | (1 << ADIE) | (0b110 << ADPS0);
 216:	ea e7       	ldi	r30, 0x7A	; 122
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	8e 68       	ori	r24, 0x8E	; 142
 21e:	80 83       	st	Z, r24
	
	//enable ADC0, ADC1 pins
	DIDR0 |= 0b11;
 220:	ee e7       	ldi	r30, 0x7E	; 126
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	83 60       	ori	r24, 0x03	; 3
 228:	80 83       	st	Z, r24
 22a:	08 95       	ret

Disassembly of section .text.read_adc:

0000019c <read_adc>:
uint16_t read_adc(uint8_t pin)
{
	uint8_t adcl = 0;
	uint8_t adch = 0;
	
	adc_flag = 0;
 19c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <adc_flag>
	
	ADMUX &= 0xF0;
 1a0:	ec e7       	ldi	r30, 0x7C	; 124
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	90 81       	ld	r25, Z
 1a6:	90 7f       	andi	r25, 0xF0	; 240
 1a8:	90 83       	st	Z, r25
	ADMUX |= pin;
 1aa:	90 81       	ld	r25, Z
 1ac:	89 2b       	or	r24, r25
 1ae:	80 83       	st	Z, r24
	
	//start adc conversion
	ADCSRA |= 1 << ADSC;
 1b0:	ea e7       	ldi	r30, 0x7A	; 122
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	80 64       	ori	r24, 0x40	; 64
 1b8:	80 83       	st	Z, r24
	
	//wait for conversion to complete
	while(!adc_flag);
 1ba:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <adc_flag>
 1be:	88 23       	and	r24, r24
 1c0:	e1 f3       	breq	.-8      	; 0x1ba <read_adc+0x1e>
	
	adcl = ADCL;
 1c2:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	adch = ADCH;
 1c6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	
	return (adch << 8) | adcl;
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	98 2f       	mov	r25, r24
 1ce:	88 27       	eor	r24, r24
}
 1d0:	82 2b       	or	r24, r18
 1d2:	08 95       	ret

Disassembly of section .text.update_display:

000000d2 <update_display>:

//function to update the value of the 7 segment display
void update_display(uint16_t value)
{
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	ac 01       	movw	r20, r24
	//turn all digits off
	PORTB = 0b11111111;
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	85 b9       	out	0x05, r24	; 5
	//turn all segments off
	PORTD = 0;
  dc:	1b b8       	out	0x0b, r1	; 11
	
	//loop to sequentially drive each digit
	int i = 0;
  de:	c0 e0       	ldi	r28, 0x00	; 0
  e0:	d0 e0       	ldi	r29, 0x00	; 0
	do
	{
		//turn all digits off
		PORTB = 0b11111111;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	85 b9       	out	0x05, r24	; 5
		//select digit
		PORTB &= ~(1 << (3-i));
  e6:	25 b1       	in	r18, 0x05	; 5
  e8:	63 e0       	ldi	r22, 0x03	; 3
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	6c 1b       	sub	r22, r28
  ee:	7d 0b       	sbc	r23, r29
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <update_display+0x28>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <update_display+0x24>
  fe:	80 95       	com	r24
 100:	82 23       	and	r24, r18
 102:	85 b9       	out	0x05, r24	; 5
		
		//write digit value to segment pins
		PORTD = character_map[value % 10];
 104:	9a 01       	movw	r18, r20
 106:	ad ec       	ldi	r26, 0xCD	; 205
 108:	bc ec       	ldi	r27, 0xCC	; 204
 10a:	0e 94 25 01 	call	0x24a	; 0x24a <__umulhisi3>
 10e:	96 95       	lsr	r25
 110:	87 95       	ror	r24
 112:	96 95       	lsr	r25
 114:	87 95       	ror	r24
 116:	96 95       	lsr	r25
 118:	87 95       	ror	r24
 11a:	9c 01       	movw	r18, r24
 11c:	22 0f       	add	r18, r18
 11e:	33 1f       	adc	r19, r19
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	82 0f       	add	r24, r18
 12e:	93 1f       	adc	r25, r19
 130:	9a 01       	movw	r18, r20
 132:	28 1b       	sub	r18, r24
 134:	39 0b       	sbc	r19, r25
 136:	c9 01       	movw	r24, r18
 138:	09 2e       	mov	r0, r25
 13a:	00 0c       	add	r0, r0
 13c:	aa 0b       	sbc	r26, r26
 13e:	8e 53       	subi	r24, 0x3E	; 62
 140:	9f 4f       	sbci	r25, 0xFF	; 255
 142:	af 4f       	sbci	r26, 0xFF	; 255
 144:	fc 01       	movw	r30, r24
 146:	84 91       	lpm	r24, Z
 148:	a7 fd       	sbrc	r26, 7
 14a:	80 81       	ld	r24, Z
 14c:	8b b9       	out	0x0b, r24	; 11
		
		for(int j = 0; j < (speed_value + 1); j++)
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	08 c0       	rjmp	.+16     	; 0x164 <update_display+0x92>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 154:	8f ec       	ldi	r24, 0xCF	; 207
 156:	97 e0       	ldi	r25, 0x07	; 7
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <update_display+0x86>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <update_display+0x8c>
 15e:	00 00       	nop
 160:	2f 5f       	subi	r18, 0xFF	; 255
 162:	3f 4f       	sbci	r19, 0xFF	; 255
 164:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 168:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	28 17       	cp	r18, r24
 170:	39 07       	cpc	r19, r25
 172:	80 f3       	brcs	.-32     	; 0x154 <update_display+0x82>
		{
			_delay_ms(1);
		}
		
		i++;
 174:	21 96       	adiw	r28, 0x01	; 1
	} while (value /= 10);
 176:	9a 01       	movw	r18, r20
 178:	ad ec       	ldi	r26, 0xCD	; 205
 17a:	bc ec       	ldi	r27, 0xCC	; 204
 17c:	0e 94 25 01 	call	0x24a	; 0x24a <__umulhisi3>
 180:	ac 01       	movw	r20, r24
 182:	56 95       	lsr	r21
 184:	47 95       	ror	r20
 186:	56 95       	lsr	r21
 188:	47 95       	ror	r20
 18a:	56 95       	lsr	r21
 18c:	47 95       	ror	r20
 18e:	41 15       	cp	r20, r1
 190:	51 05       	cpc	r21, r1
 192:	09 f0       	breq	.+2      	; 0x196 <update_display+0xc4>
 194:	a6 cf       	rjmp	.-180    	; 0xe2 <update_display+0x10>
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

Disassembly of section .text.main:

000001d4 <main>:
	adc_flag = 1;
}

int main(void)
{
	init_display();
 1d4:	0e 94 3f 01 	call	0x27e	; 0x27e <init_display>
	init_adc();
 1d8:	0e 94 06 01 	call	0x20c	; 0x20c <init_adc>
	//enable global interrupts
	sei();
 1dc:	78 94       	sei
	
    while(1)
    {	
		speed_value = read_adc(0);
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	0e 94 ce 00 	call	0x19c	; 0x19c <read_adc>
 1e4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		adc_value = 1023 - read_adc(1);
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	0e 94 ce 00 	call	0x19c	; 0x19c <read_adc>
 1f2:	2f ef       	ldi	r18, 0xFF	; 255
 1f4:	33 e0       	ldi	r19, 0x03	; 3
 1f6:	a9 01       	movw	r20, r18
 1f8:	48 1b       	sub	r20, r24
 1fa:	59 0b       	sbc	r21, r25
 1fc:	ca 01       	movw	r24, r20
 1fe:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <adc_value+0x1>
 202:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <adc_value>
		update_display(adc_value);
 206:	0e 94 69 00 	call	0xd2	; 0xd2 <update_display>
 20a:	e9 cf       	rjmp	.-46     	; 0x1de <main+0xa>

Disassembly of section .text.libgcc.mul:

0000024a <__umulhisi3>:
 24a:	a2 9f       	mul	r26, r18
 24c:	b0 01       	movw	r22, r0
 24e:	b3 9f       	mul	r27, r19
 250:	c0 01       	movw	r24, r0
 252:	a3 9f       	mul	r26, r19
 254:	70 0d       	add	r23, r0
 256:	81 1d       	adc	r24, r1
 258:	11 24       	eor	r1, r1
 25a:	91 1d       	adc	r25, r1
 25c:	b2 9f       	mul	r27, r18
 25e:	70 0d       	add	r23, r0
 260:	81 1d       	adc	r24, r1
 262:	11 24       	eor	r1, r1
 264:	91 1d       	adc	r25, r1
 266:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000028e <_fini>:
 28e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000290 <__funcs_on_exit>:
 290:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000292 <__simulator_exit>:
 292:	08 95       	ret

Disassembly of section .text.exit:

00000268 <exit>:
 268:	ec 01       	movw	r28, r24
 26a:	0e 94 48 01 	call	0x290	; 0x290 <__funcs_on_exit>
 26e:	0e 94 47 01 	call	0x28e	; 0x28e <_fini>
 272:	ce 01       	movw	r24, r28
 274:	0e 94 49 01 	call	0x292	; 0x292 <__simulator_exit>
 278:	ce 01       	movw	r24, r28
 27a:	0e 94 45 01 	call	0x28a	; 0x28a <_Exit>

Disassembly of section .text._Exit:

0000028a <_Exit>:
 28a:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
